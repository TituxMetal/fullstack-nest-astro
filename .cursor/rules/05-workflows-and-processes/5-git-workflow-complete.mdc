---
description:
  APPLY comprehensive git workflow for solo development WHEN planning features, implementing code,
  committing changes, or managing development workflow to ensure consistent branching, conventional
  commits, and clean linear history
globs: '**'
alwaysApply: true
---

Status Checking:

- Check `git status` before any git guidance
- Understand current branch and working directory state
- Adapt workflow guidance based on actual git situation

Change Analysis:

- Analyze actual changes before suggesting branch or commit types
- Question user's framing if it doesn't match change type
- Be consistent between branch names and commit types
- Suggest better categorization with reasoning
- Explain why specific type is more appropriate

Complex Workflow Planning:

- Use sequential thinking tool for multi-step git processes
- Apply sequential thinking when planning feature development
- Use structured thinking for analyzing conflicting changes
- Break down complex workflows into clear sequential steps
- Think through implications before suggesting actions

Branch Management:

- Never commit directly to `main` branch
- If on `main` with changes, suggest feature branch first
- Create feature branch from `main`
- Use `feature/short-descriptive-name` format
- Use `fix/short-descriptive-name` for bug fixes
- Use `docs/short-descriptive-name` for documentation
- Use `chore/short-descriptive-name` for maintenance
- Use kebab-case for branch names

Commit Process:

- Check staged changes before suggesting commits
- Verify files need staging before suggesting `git add`
- Adapt commit guidance based on staging area state
- Use `type(scope): description` format
- Start with lowercase description
- Use `feat` for new features
- Use `fix` for bug fixes
- Use `docs` for documentation changes
- Use `chore` for maintenance tasks
- Use `refactor` for code restructuring
- Use `style` for formatting changes
- Use `test` for test additions
- Keep description under 50 characters
- Add body for complex changes
- Use present tense verbs
- Omit scope if obvious
- Use `!` for breaking changes

Merge Process:

- Work in small atomic commits
- Push feature branches for backup
- Rebase feature onto latest `main`
- Fast-forward merge to `main`

Pull Request Process:

- Consider PRs for complex features or major changes
- Use descriptive PR titles matching commit conventions
- Include problem description and solution approach
- Reference related issues in PR description
- Use draft PRs for work-in-progress discussion
- Self-review code before marking ready
- Merge PRs using rebase strategy when possible

Issues Management:

- Create issues for planned features and bug reports
- Use clear, descriptive issue titles
- Reference issues in commit messages with `#issue-number`
- Link branches to issues using naming like `feature/123-issue-description`
- Close issues automatically with `fixes #123` in commit messages
- Use issue labels for categorization and priority

GitHub Integration:

- Use GitHub MCP tools when available for issue/PR management
- Create issues directly using `mcp_github_create_issue` for planned features
- Create PRs using `mcp_github_create_pull_request` for complex changes
- Check repository status using GitHub tools before suggesting actions
- Link issues and PRs programmatically with proper references
- Use `mcp_github_search_issues` to check for existing similar issues
- Apply GitHub labels and assignees using MCP tools

Cleanup:

- Delete feature branch after merge
- Keep `main` always deployable
- Force-push after rebase if needed
